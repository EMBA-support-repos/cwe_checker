{
  "_comment": "This file is loaded instead of config.json when analyzing an LKM. The analysis of LKMs requires a different set of options compared to the analysis of user-space programs.",
  "CWE134": {
    "_comment": "Functions that take format string arguments.",
    "format_string_symbols": [],
    "format_string_index": {}
  },
  "CWE190": {
    "symbols": []
  },
  "CWE215": {
    "symbols": []
  },
  "CWE252": {
    "_comment": "All exported functions annotated with warn_unused_result.",
    "strict_mode": false,
    "strict_symbols": [],
    "symbols": [
      "__ab_c_size",
      "action",
      "add_bind_files",
      "add_mtd_device",
      "aesgcm_decrypt",
      "anybuss_host_common_probe",
      "aq_check_approve_fl2",
      "aq_check_approve_fvlan",
      "aq_check_filter",
      "aq_check_rule",
      "aq_match_filter",
      "aq_rule_already_exists",
      "aq_rule_is_approve",
      "aq_rule_is_not_correct",
      "aq_rule_is_not_support",
      "__arch_clear_user",
      "__arch_copy_from_user",
      "__arch_copy_to_user",
      "arch_get_random_longs",
      "arch_get_random_seed_longs",
      "arch_phys_wc_add",
      "arch_phys_wc_index",
      "arm_clear_user",
      "arm_copy_from_user",
      "arm_copy_to_user",
      "asix_read_cmd",
      "__asm_copy_from_user",
      "__asm_copy_to_user",
      "ata_pci_device_do_resume",
      "__attribute__",
      "attribute_container_unregister",
      "ax25_create_cb",
      "ax25_listen_register",
      "ax25_rt_add",
      "ax25_uid_ioctl",
      "__bch2_btree_iter_traverse",
      "bch2_btree_iter_traverse",
      "bch2_btree_node_lock_write",
      "bch2_btree_path_make_mut",
      "__bch2_btree_path_set_pos",
      "bch2_btree_path_set_pos",
      "bch2_btree_path_traverse",
      "bch2_btree_path_traverse_one",
      "bch2_trans_update",
      "bch2_trans_update_buffered",
      "bch2_trans_update_by_path",
      "bch2_write_inode",
      "bch2_write_inode_size",
      "bio_add_folio",
      "bio_add_page",
      "blk_get_queue",
      "bsg_job_get",
      "btree_init",
      "btree_insert",
      "btree_node_lock_nopath",
      "bus_create_file",
      "bus_register",
      "bus_rescan_devices",
      "bus_rescan_devices_helper",
      "can_get_echo_skb",
      "__cdx_driver_register",
      "cfg80211_inform_bss",
      "cfg80211_inform_bss_frame",
      "chacha20poly1305_decrypt",
      "check_copy_size",
      "check_zeroed_user",
      "class_create",
      "class_create_file",
      "class_create_file_ns",
      "class_interface_register",
      "class_register",
      "__clear_user",
      "clear_user",
      "__clear_user_std",
      "clk_bulk_enable",
      "clk_bulk_get",
      "clk_bulk_get_all",
      "clk_bulk_get_optional",
      "clk_bulk_prepare",
      "clk_bulk_prepare_enable",
      "clk_hw_register",
      "copy_from_iter",
      "copy_from_iter_full",
      "copy_from_iter_full_nocache",
      "copy_from_iter_nocache",
      "__copy_from_user",
      "_copy_from_user",
      "copy_from_user",
      "__copy_from_user_inatomic",
      "__copy_from_user_inatomic_nocache",
      "_copy_from_user_key",
      "copy_from_user_key",
      "copy_mc_fragile",
      "copy_mc_generic",
      "copy_mc_to_kernel",
      "copy_mc_to_user",
      "copy_nofault",
      "__copy_tofrom_user",
      "copy_to_iter",
      "__copy_to_user",
      "_copy_to_user",
      "copy_to_user",
      "_copy_to_user_key",
      "copy_to_user_key",
      "__copy_to_user_std",
      "__copy_user_flushcache",
      "copy_user_generic",
      "csr_seed_long",
      "current_clr_polling_and_test",
      "current_set_polling_and_test",
      "curve25519",
      "__deliver_ckc",
      "__deliver_cpu_timer",
      "__deliver_emergency_signal",
      "__deliver_external_call",
      "__deliver_io",
      "__deliver_machine_check",
      "__deliver_pfault_done",
      "__deliver_pfault_init",
      "__deliver_prog",
      "__deliver_restart",
      "__deliver_service",
      "__deliver_service_ev",
      "__deliver_set_prefix",
      "__deliver_virtio",
      "destroy_hw_fd_uobject",
      "destroy_hw_idr_uobject",
      "device_add",
      "device_add_disk",
      "device_add_group",
      "device_add_groups",
      "device_attach",
      "device_bind_driver",
      "device_create_bin_file",
      "device_driver_attach",
      "device_register",
      "device_reprobe",
      "device_reset",
      "devm_anybuss_host_common_probe",
      "devm_clk_bulk_get",
      "devm_clk_bulk_get_all",
      "devm_clk_bulk_get_optional",
      "devm_clk_hw_register",
      "devm_device_add_group",
      "devm_device_add_groups",
      "devm_pinctrl_get",
      "devm_pinctrl_get_select",
      "devm_pinctrl_get_select_default",
      "devm_regulator_bulk_get",
      "devm_regulator_bulk_get_const",
      "devm_regulator_bulk_get_exclusive",
      "devm_request_any_context_irq",
      "devm_request_irq",
      "devm_request_threaded_irq",
      "__devm_uio_register_device",
      "devres_open_group",
      "__die",
      "dm_set_target_max_io_len",
      "do_mlock",
      "do_notify_parent",
      "down_interruptible",
      "down_killable",
      "down_read_interruptible",
      "down_read_killable",
      "down_read_killable_nested",
      "down_timeout",
      "down_trylock",
      "down_write_killable",
      "driver_attach",
      "driver_create_file",
      "driver_for_each_device",
      "driver_register",
      "drm_atomic_add_affected_connectors",
      "drm_atomic_add_affected_planes",
      "drm_atomic_add_encoder_bridges",
      "drm_atomic_check_only",
      "drm_atomic_commit",
      "drm_atomic_get_crtc_state",
      "drm_atomic_get_private_obj_state",
      "drm_atomic_helper_swap_state",
      "drm_atomic_nonblocking_commit",
      "drm_atomic_set_crtc_for_connector",
      "drm_atomic_set_crtc_for_plane",
      "drm_atomic_set_mode_for_crtc",
      "drm_atomic_set_mode_prop_for_crtc",
      "drm_atomic_state_alloc",
      "drm_atomic_state_init",
      "drm_dp_atomic_find_time_slots",
      "drm_dp_atomic_release_time_slots",
      "drm_dp_mst_add_affected_dsc_crtcs",
      "drm_dp_mst_atomic_check",
      "drm_dp_mst_atomic_check_mgr",
      "drm_dp_mst_atomic_setup_commit",
      "drm_dp_mst_root_conn_atomic_check",
      "drm_dp_mst_topology_mgr_resume",
      "__drmm_add_action",
      "__drmm_add_action_or_reset",
      "drmm_mode_config_init",
      "drm_modeset_lock_single_interruptible",
      "dvb_usb_generic_rw",
      "dvb_usb_generic_write",
      "ERR_PTR",
      "ffs_do_descs",
      "ffs_do_single_desc",
      "ffs_epfiles_create",
      "fh_fill_both_attrs",
      "fh_fill_pre_attrs",
      "fieldbus_dev_register",
      "file_check_and_advance_wb_err",
      "file_fdatawait_range",
      "file_write_and_wait_range",
      "fsl_create_mc_io",
      "fsl_mc_allocate_irqs",
      "fsl_mc_device_add",
      "__fsl_mc_driver_register",
      "fsl_mc_is_allocatable",
      "fsl_mc_object_allocate",
      "fsl_mc_portal_allocate",
      "fsl_mc_resource_allocate",
      "__gameport_register_driver",
      "guc_mcr_reg_add",
      "guc_mmio_reg_add",
      "hex2bin",
      "hid_hw_open",
      "hid_hw_start",
      "__hid_register_driver",
      "HYPERVISOR_hvm_op",
      "i915_active_fence_set",
      "i915_gem_evict_for_node",
      "i915_gem_evict_something",
      "i915_gem_gtt_prepare_pages",
      "i915_gem_init",
      "i915_gem_object_ggtt_pin",
      "i915_gem_object_ggtt_pin_ww",
      "i915_gem_object_pin_pages",
      "i915_gem_object_set_to_cpu_domain",
      "i915_gem_object_set_to_gtt_domain",
      "i915_gem_object_set_to_wc_domain",
      "i915_gem_ww_ctx_backoff",
      "__i915_request_create",
      "_i915_vma_move_to_active",
      "i915_vma_pin",
      "i915_vma_pin_fence",
      "i915_vma_pin_ww",
      "i915_vma_unbind",
      "i915_vma_unbind_async",
      "i915_vma_unbind_unlocked",
      "i915_vm_lock_objects",
      "idr_alloc_u32",
      "__idxd_driver_register",
      "ieee80211_link_change_bandwidth",
      "ieee80211_link_reserve_chanctx",
      "ieee80211_link_use_channel",
      "ieee80211_link_use_reserved_context",
      "igt_vma_move_to_active_unlocked",
      "il4965_request_firmware",
      "il_send_cmd_pdu",
      "il_send_cmd_sync",
      "input_allocate_device",
      "input_get_new_minor",
      "input_register_device",
      "input_register_handler",
      "intel_gt_init_hw",
      "intel_gt_reset_lock_interruptible",
      "intel_gt_reset_trylock",
      "io_schedule_prepare",
      "IS_ERR",
      "IS_ERR_OR_NULL",
      "ivpu_bo_pin",
      "ivpu_rpm_get",
      "ivpu_rpm_get_if_active",
      "iwl_mvm_send_cmd",
      "iwl_mvm_send_cmd_pdu",
      "iwl_mvm_send_cmd_pdu_status",
      "iwl_mvm_send_cmd_status",
      "iwl_op_mode_hw_rf_kill",
      "iwl_pci_register_driver",
      "iwl_scan_initiate",
      "__kasan_init_slab_obj",
      "__kasan_kmalloc",
      "__kasan_kmalloc_large",
      "__kasan_krealloc",
      "__kasan_slab_alloc",
      "kfence_handle_page_fault",
      "__kfifo_int_must_check_helper",
      "__kfifo_uint_must_check_helper",
      "kmsan_ioremap_page_range",
      "kmsan_memblock_free_pages",
      "kmsan_vmap_pages_range_noflush",
      "kobject_add",
      "kobject_create_and_add",
      "kobject_get_unless_zero",
      "kobject_init_and_add",
      "kobject_move",
      "kobject_rename",
      "krealloc",
      "kset_register",
      "kstrtobool",
      "kstrtobool_from_user",
      "kstrtoint",
      "kstrtoint_from_user",
      "_kstrtol",
      "kstrtol_from_user",
      "kstrtoll",
      "kstrtoll_from_user",
      "kstrtos16",
      "kstrtos16_from_user",
      "kstrtos32",
      "kstrtos32_from_user",
      "kstrtos64",
      "kstrtos64_from_user",
      "kstrtos8",
      "kstrtos8_from_user",
      "kstrtou16",
      "kstrtou16_from_user",
      "kstrtou32",
      "kstrtou32_from_user",
      "kstrtou64",
      "kstrtou64_from_user",
      "kstrtou8",
      "kstrtou8_from_user",
      "kstrtouint",
      "kstrtouint_from_user",
      "_kstrtoul",
      "kstrtoul_from_user",
      "kstrtoull",
      "kstrtoull_from_user",
      "kvm_s390_deliver_pending_interrupts",
      "kvm_s390_inject_vcpu",
      "kvm_s390_inject_vm",
      "lclear_user",
      "may_use_simd",
      "__mcb_register_driver",
      "mddev_lock",
      "md_flush_request",
      "__media_device_register",
      "media_device_register_entity",
      "media_devnode_register",
      "media_request_lock_for_access",
      "media_request_lock_for_update",
      "mhi_ep_check_mhi_state",
      "mhi_poll_reg_field",
      "mhi_read_reg",
      "mhi_read_reg_field",
      "mhi_tryset_pm_state",
      "mhi_write_reg_field",
      "mix_dh",
      "mix_precomputed_dh",
      "__mmio_reg_add",
      "__must_check_fn",
      "mutex_lock_interruptible",
      "mutex_lock_interruptible_nested",
      "mutex_lock_killable",
      "mutex_lock_killable_nested",
      "mux_control_select",
      "mux_control_select_delay",
      "mux_control_try_select",
      "mux_control_try_select_delay",
      "mux_state_select",
      "mux_state_select_delay",
      "mux_state_try_select",
      "mux_state_try_select_delay",
      "__nd_driver_register",
      "nd_jump_link",
      "npe_debug_instr",
      "npe_logical_reg_write16",
      "npe_logical_reg_write32",
      "npe_logical_reg_write8",
      "nr_set_mac_address",
      "nvhe_check_data_corruption",
      "nvif_chan_wait",
      "object_type_to_pool_type",
      "of_clk_bulk_get",
      "of_clk_bulk_get_all",
      "of_clk_hw_register",
      "of_icc_bulk_get",
      "of_regulator_bulk_get_all",
      "omap_get_global_state",
      "__parport_register_driver",
      "pci_assign_resource",
      "pcibios_enable_device",
      "pci_bus_alloc_resource",
      "pci_create_sysfs_dev_files",
      "pci_enable_device",
      "pci_enable_device_io",
      "pci_enable_device_mem",
      "pci_map_rom",
      "pcim_enable_device",
      "pcim_set_mwi",
      "pci_reassign_resource",
      "pci_reenable_device",
      "__pci_register_driver",
      "pci_request_config_region_exclusive",
      "pci_request_region",
      "pci_request_regions",
      "pci_request_regions_exclusive",
      "pci_resize_resource",
      "pci_set_mwi",
      "pcmcia_request_irq",
      "percpu_ref_init",
      "pinctrl_get",
      "pinctrl_get_select",
      "pinctrl_get_select_default",
      "pinctrl_lookup_state",
      "prom_getproperty",
      "PTR_ERR",
      "PTR_ERR_OR_ZERO",
      "PUSH_WAIT",
      "raw_copy_from_user",
      "raw_copy_in_user",
      "raw_copy_to_user",
      "rcuref_get_slowpath",
      "rcuref_put_slowpath",
      "rdma_restrack_get",
      "rdrand_long",
      "rdseed_long",
      "__realloc_size",
      "__refcount_add_not_zero",
      "refcount_dec_and_lock",
      "refcount_dec_and_lock_irqsave",
      "refcount_dec_and_mutex_lock",
      "__refcount_dec_and_test",
      "refcount_dec_if_one",
      "refcount_dec_not_one",
      "__refcount_inc_not_zero",
      "__refcount_sub_and_test",
      "regulator_bulk_enable",
      "regulator_bulk_get",
      "regulator_enable",
      "reiserfs_write_unlock_nested",
      "__releases",
      "remove_arg_zero",
      "request_any_context_irq",
      "request_nmi",
      "__request_percpu_irq",
      "request_percpu_irq",
      "request_percpu_nmi",
      "request_threaded_irq",
      "rfkill_alloc",
      "rfkill_register",
      "RING_SPACE",
      "rmi_register_function",
      "__rmi_register_function_handler",
      "rose_add_loopback_node",
      "scmi_devres_protocol_instance_get",
      "scmi_voltage_info_get",
      "scsi_add_host",
      "scsi_add_host_with_dma",
      "scsi_device_get",
      "scsi_device_reprobe",
      "__serio_register_driver",
      "set_fd_set",
      "shpchp_create_ctrl_files",
      "__skb_header_pointer",
      "skb_header_pointer",
      "skb_pointer_if_linear",
      "skb_set_owner_sk_safe",
      "skb_to_sgvec",
      "skb_to_sgvec_nomark",
      "skip_spaces",
      "__smsc75xx_read_reg",
      "smsc75xx_read_reg",
      "smsc75xx_read_reg_nopm",
      "__smsc75xx_write_reg",
      "smsc75xx_write_reg",
      "smsc75xx_write_reg_nopm",
      "smsc95xx_eeprom_confirm_not_busy",
      "smsc95xx_read_reg",
      "smsc95xx_wait_eeprom",
      "smsc95xx_write_reg",
      "smsc95xx_write_reg_async",
      "__snd_seq_driver_register",
      "spu_acquire_saved",
      "ssc_request",
      "stack_depot_set_extra_bits",
      "__sta_info_destroy",
      "__sta_info_destroy_part1",
      "strncpy_from_user",
      "strnlen_user",
      "strstrip",
      "sysfs_chmod_file",
      "sysfs_create_bin_file",
      "sysfs_create_dir_ns",
      "sysfs_create_file",
      "sysfs_create_file_ns",
      "sysfs_create_files",
      "sysfs_create_group",
      "sysfs_create_groups",
      "sysfs_create_link",
      "sysfs_create_link_nowarn",
      "sysfs_create_mount_point",
      "sysfs_init",
      "sysfs_move_dir_ns",
      "sysfs_rename_dir_ns",
      "sysfs_update_groups",
      "tcp_queue_rcv",
      "tpm_try_get_ops",
      "try_get_page",
      "try_grab_page",
      "tty_ldisc_init",
      "typeof",
      "__uio_register_device",
      "unclaimed_reg_debug_header",
      "usb_find_bulk_in_endpoint",
      "usb_find_bulk_out_endpoint",
      "usb_find_common_endpoints",
      "usb_find_common_endpoints_reverse",
      "usb_find_int_in_endpoint",
      "usb_find_int_out_endpoint",
      "usb_find_last_bulk_in_endpoint",
      "usb_find_last_bulk_out_endpoint",
      "usb_find_last_int_in_endpoint",
      "usb_find_last_int_out_endpoint",
      "user_access_begin",
      "user_event_last_ref",
      "user_read_access_begin",
      "user_write_access_begin",
      "uuid_is_valid",
      "v4l2_async_register_subdev_sensor",
      "v4l2_device_register",
      "v4l2_device_register_subdev",
      "__v4l2_device_register_subdev_nodes",
      "vb2_queue_init",
      "vb2_queue_init_name",
      "__video_register_device",
      "__vmap_pages_range_noflush",
      "vmap_pages_range_noflush",
      "vm_brk_flags",
      "__vmbus_driver_register",
      "vm_mmap",
      "vm_mmap_pgoff",
      "wl12xx_sdio_raw_read",
      "wl12xx_sdio_raw_write",
      "wl12xx_spi_raw_read",
      "wl12xx_spi_raw_write",
      "wl12xx_top_reg_read",
      "wl12xx_top_reg_write",
      "wl18xx_top_reg_read",
      "wl18xx_top_reg_write",
      "wlcore_raw_read",
      "wlcore_raw_read32",
      "wlcore_raw_read_data",
      "wlcore_raw_write32",
      "wlcore_raw_write_data",
      "wlcore_read",
      "wlcore_read32",
      "wlcore_read_data",
      "wlcore_read_hwaddr",
      "wlcore_read_reg",
      "wlcore_write",
      "wlcore_write32",
      "wlcore_write_data",
      "wlcore_write_reg",
      "__wmi_driver_register",
      "ww_mutex_lock",
      "ww_mutex_lock_interruptible",
      "ww_mutex_trylock",
      "__xa_alloc",
      "__xa_alloc_cyclic",
      "__xa_insert",
      "xchacha20poly1305_decrypt",
      "__xenbus_register_backend",
      "__xenbus_register_frontend",
      "zswap_pool_get"
    ]
  },
  "CWE416": {
    "_comment": "Functions that invalidate the pointer passed as the first argument.",
    "deallocation_symbols": [],
    "always_include_full_path_to_free_site": true
  },
  "CWE457": {
    "symbols": []
  },
  "CWE467": {
    "_comment": "Any function that takes something of type `size_t` could be a possible candidate.",
    "symbols": [
      "bcmp",
      "memchr",
      "memcmp",
      "memcpy",
      "memmove",
      "memscan",
      "memset",
      "memset16",
      "memset32",
      "memset64",
      "strlcat",
      "strlcpy",
      "strncasecmp",
      "strncat",
      "strnchr",
      "strnchrnul",
      "strncmp",
      "strncpy",
      "strnlen",
      "strnstr",
      "strscpy"
    ]
  },
  "CWE476": {
    "_comment": "Any function that possibly returns a NULL value.",
    "parameters": [
      "strict_call_policy=true",
      "strict_memory_policy=false",
      "max_steps=100"
    ],
    "symbols": [
      "__kmalloc",
      "__kmalloc_node",
      "__kmalloc_node_track_caller",
      "__vcalloc",
      "kmalloc_large_node",
      "kmalloc_node_trace",
      "kmalloc_order",
      "kmalloc_order_trace",
      "kmalloc_trace",
      "kmem_cache_alloc_node",
      "kmem_cache_alloc_trace",
      "kmemdup",
      "kmemdup_nul",
      "krealloc",
      "kstrdup",
      "kstrdup_const",
      "kstrndup",
      "kvmalloc_node",
      "kvmemdup",
      "kvrealloc",
      "memdup_user_nul",
      "strndup_user",
      "vcalloc",
      "vmalloc_array",
      "vmemdup_user"
    ]
  },
  "CWE676": {
    "_comment": "https://github.com/01org/safestringlib/wiki/SDL-List-of-Banned-Functions",
    "symbols": [
      "memcmp",
      "memcpy",
      "memmove",
      "memset",
      "strcat",
      "strcpy",
      "strlen",
      "strncat",
      "strncpy"
    ]
  },
  "CWE789": {
    "_comment": "Allocation functions that accept a size argument.",
    "stack_threshold": 7500,
    "heap_threshold": 1000000,
    "symbols": []
  },
  "Memory": {
    "allocation_symbols": [
      "__kmalloc",
      "__kmalloc_node",
      "__kmalloc_node_track_caller",
      "__vcalloc",
      "kmalloc_large_node",
      "kmalloc_node_trace",
      "kmalloc_order",
      "kmalloc_order_trace",
      "kmalloc_trace",
      "kmem_cache_alloc_node",
      "kmem_cache_alloc_trace",
      "kmemdup",
      "kmemdup_nul",
      "krealloc",
      "kstrdup",
      "kstrdup_const",
      "kstrndup",
      "kvmalloc_node",
      "kvmemdup",
      "kvrealloc",
      "memdup_user_nul",
      "strndup_user",
      "vcalloc",
      "vmalloc_array",
      "vmemdup_user"
    ]
  }
}
